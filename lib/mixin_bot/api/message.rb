# frozen_string_literal: false

module MixinBot
  class API
    # https://developers.mixin.one/api/beta-mixin-message/websocket-messages/
    module Message
      def list_pending_message
        write_ws_message(action: 'LIST_PENDING_MESSAGES', params: {})
      end

      # ACKNOWLEDGE_MESSAGE_RECEIPT ack server received message
      # {
      #   "id": "UUID",
      #   "action": "ACKNOWLEDGE_MESSAGE_RECEIPT",
      #   "params": {
      #     "message_id": "UUID // message_id is you received message's message_id",
      #     "status": "READ"
      #   }
      # }
      def acknowledge_message_receipt(message_id)
        params = {
          message_id: message_id,
          status: 'READ'
        }
        write_ws_message(action: 'ACKNOWLEDGE_MESSAGE_RECEIPT', params: params)
      end

      # {
      #   "id": "UUID // generated by client",
      #   "action":  "CREATE_MESSAGE",
      #   "params": {
      #     "conversation_id": "UUID",
      #     "category": "PLAIN_TEXT",
      #     "status": "SENT",
      #     "message_id": "UUID // generated by client",
      #     "data": "Base64 encoded data" ,
      #   }
      # }
      def plain_text(options)
        options.merge!(category: 'PLAIN_TEXT')
        base_message_params(options)
      end

      # {
      #   "id": "UUID",
      #   "action": "CREATE_MESSAGE",
      #   "params": {
      #     "conversation_id": "UUID"
      #     "category": "PLAIN_IMAGE"
      #     "status": "SENT",
      #     "message_id": "UUID",
      #     "data": "Base64 encoded data"
      #   }
      # }
      # data format:
      # {
      #   "attachment_id":
      #   "Read From POST /attachments",
      #   "mime_type": "",
      #   "width": 1024,
      #   "height": 1024,
      #   "size": 1024,
      #   "thumbnail": "base64 encoded"
      # }
      def plain_image(options)
        options.merge!(category: 'PLAIN_IMAGE')
        base_message_params(options)
      end

      # {
      #   "id":  "UUID",
      #   "action":  "CREATE_MESSAGE",
      #   "params": {
      #     "conversation_id": "UUID",
      #     "category": "PLAIN_DATA",
      #     "status": "SENT",
      #     "message_id": "UUID",
      #     "data": "Base64 encoded data",
      #   }
      # }
      # data format:
      # {
      #   "attachment_id": "Read From POST /attachments",
      #   "mime_type": "",
      #   "size": 1024,
      #   "name": "Share"
      # }
      def plain_data(options)
        options.merge!(category: 'PLAIN_DATA')
        base_message_params(options)
      end

      # {
      #   "id":  "UUID",
      #   "action":  "CREATE_MESSAGE",
      #   "params": {
      #     "conversation_id": "UUID",
      #     "category": "PLAIN_STICKER",
      #     "status": "SENT",
      #     "message_id":  "UUID",
      #     "data": "Base64 encoded data"
      #   }
      # }
      # data format:
      # {
      #   "name": "hello",
      #   "album_id": "UUID"
      # }
      def plain_sticker(options)
        options.merge!(category: 'PLAIN_STICKER')
        base_message_params(options)
      end

      # {
      #   "id": "UUID",
      #   "action": "CREATE_MESSAGE",
      #   "params": {
      #     "conversation_id": "UUID",
      #     "category": "PLAIN_CONTACT"
      #     "status": "SENT",
      #     "message_id": "UUID",
      #     "data":  "Base64 encoded data"
      #   }
      # }
      # data format:
      # { "user_id": "UUID"}
      def plain_contact(options)
        options.merge!(category: 'PLAIN_CONTACT')
        base_message_params(options)
      end

      # {
      #   "id": "UUID",
      #   "action": "CREATE_MESSAGE",
      #   "params": {
      #     "conversation_id": "UUID",
      #     "category": "APP_CARD",
      #     "status": "SENT",
      #     "message_id": "UUID",
      #     "data": "Base64 encoded data"
      #   }
      # }
      # data format:
      # {
      #   "icon_url": "https://mixin.one/assets/98b586edb270556d1972112bd7985e9e.png",
      #   "title": "Mixin",
      #   "description": "A free and lightning fast peer-to-peer transactional network for digital assets.",
      #   "action": "https://mixin.one"
      # }
      def app_card(options)
        options.merge!(category: 'APP_CARD')
        base_message_params(options)
      end

      # {
      #   "id": "UUID",
      #   "action": "CREATE_MESSAGE",
      #   "params": {
      #     "conversation_id": "UUID",
      #     "category": "APP_BUTTON_GROUP",
      #     "status": "SENT",
      #     "message_id": "UUID",
      #     "data": "Base64 encoded data"
      #   }
      # }
      # data format:
      # [
      #   {
      #     "label": "Mixin Website",
      #     "color": "#ABABAB",
      #     "action": "https://mixin.one"
      #   },
      #   ...
      # ]
      def app_button_group(options)
        options.merge!(category: 'APP_BUTTON_GROUP')
        base_message_params(options)
      end

      # {
      #   "id": "UUID",
      #   "action": "CREATE_MESSAGE",
      #   "params": {
      #     "conversation_id": "UUID",
      #     "category": "PLAIN_VIDEO",
      #     "status": "SENT",
      #     "message_id": "UUID",
      #     "data": "Base64 encoded data"
      #   }
      # }
      # data format:
      # {
      #   "attachment_id": "Read From POST /attachments",
      #   "mime_type": "",
      #   "width": 1024,
      #   "height": 1024,
      #   "size": 1024,
      #   "duration": 1024,
      #   "thumbnail": "base64 encoded"
      # }
      def plain_video(options)
        options.merge!(category: 'PLAIN_VIDEO')
        base_message_params(options)
      end

      # TODO:
      def recall_message_params(message_id, options)
        options.merge!(
          category: 'MESSAGE_RECALL',
          data: {
            message_id: message_id
          }
        )
        base_message_params(options)
      end

      # base format of message params
      def base_message_params(
        conversation_id:, 
        category:, 
        data:, 
        quote_message_id: nil, 
        message_id: nil, 
        recipient_id: nil, 
        representative_id: nil
      )
        data = data.is_a?(String) ? data : data.to_json
        {
          conversation_id: conversation_id,
          recipient_id: recipient_id,
          representative_id: representative_id,
          category: category,
          status: 'SENT',
          quote_message_id: quote_message_id,
          message_id: message_id || SecureRandom.uuid,
          data: Base64.encode64(data)
        }
      end

      # read the gzipped message form websocket
      def read_ws_message(data)
        io = StringIO.new(data.pack('c*'), 'rb')
        gzip = Zlib::GzipReader.new io
        msg = gzip.read
        gzip.close

        msg
      end

      # gzip the message for websocket
      def write_ws_message(action: 'CREATE_MESSAGE', params:)
        msg = {
          id: SecureRandom.uuid,
          action: action,
          params: params
        }.to_json

        io = StringIO.new 'wb'
        gzip = Zlib::GzipWriter.new io
        gzip.write msg
        gzip.close
        io.string.unpack('c*')
      end

      # use HTTP to send message
      def send_text_message(options)
        send_message plain_text(options)
      end

      def send_contact_message(options)
        send_message plain_contact(options)
      end

      def send_app_card_message(options)
        send_message app_card(options)
      end

      def send_app_button_group_message(options)
        send_message app_button_group(options)
      end

      def recall_message(message_id, options)
        send_message recall_message_params(message_id, options)
      end
      
      # {
      #   "id": "UUID",
      #   "action": "CREATE_PLAIN_MESSAGES",
      #   "params": {
      #     "messages": [
      #       {
      #         "conversation_id": "UUID",
      #         "recipient_id": "UUID",
      #         "message_id": "UUID",
      #         "representative_id": "UUID (optional, only supported in peer to peer conversation)",
      #         "quote_message_id": "UUID (optional, only supported text, e.g. PLAIN_TEXT)",
      #         "category": "Only support plain category e.g.: PLAIN_TEXT, PLAIN_STICKER etc",
      #         "data": "Correspond to category."
      #       },
      #       ...
      #     ]
      #   }
      # }
      def send_plain_messages(messages)
        send_message messages
      end

      # http post request
      def send_message(payload)
        path = '/messages'
        access_token ||= access_token('POST', path, payload.to_json)
        authorization = format('Bearer %<access_token>s', access_token: access_token)
        client.post(path, headers: { 'Authorization': authorization }, json: payload)
      end
    end
  end
end
