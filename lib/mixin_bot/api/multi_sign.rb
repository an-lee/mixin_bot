# frozen_string_literal: true

module MixinBot
  class API
    module MultiSign
      # https://w3c.group/c/1574309272319630

      # {"data":[
      #   {
      #     "type":"multisig_utxo",
      #     "user_id":"514ae2ff-c24e-4379-a482-e2c0f798ebb1",
      #     "utxo_id":"94711ac9-5981-4fe3-8c0e-19622219ea72",
      #     "asset_id":"965e5c6e-434c-3fa9-b780-c50f43cd955c",
      #     "transaction_hash":"2e67f3e36ee4b3c13effcc8a9aaafeb8122cad98f72d9ccc04d65a5ada2aa39d",
      #     "output_index":0,
      #     "amount":"0.123456",
      #     "threshold":2,
      #     "members":[
      #       "514ae2ff-c24e-4379-a482-e2c0f798ebb1",
      #       "13ce6c86-307a-5187-98b0-76424cbc0fbf",
      #       "2b9df368-8e3e-46ce-ac57-e6111e8ff50e",
      #       "3cb87491-4fa0-4c2f-b387-262b63cbc412"
      #     ],
      #     "memo":"难道你是女生",
      #     "state":"unspent",
      #     "created_at":"2019-11-03T13:30:43.922655Z",
      #     "signed_by":"",
      #     "signed_tx":""
      #   }
      # ]}
      def get_multisigs(limit:, offset:)
        path = format('/multisigs?limit=%<limit>s&offset=%<offset>s', limit: limit, offset: offset)
        access_token ||= access_token('GET', path, '')
        authorization = format('Bearer %<access_token>s', access_token: access_token)
        client.get(path, headers: { 'Authorization': authorization })
      end

      # sign a multi-sign payment
      # for now, raw(RAW-TRANSACTION-HEX) can only be generated by Mixin SDK of Golang or Javascript
      def sign_multisigs(raw)
        path = '/multisigs'
        payload = {
          action: 'sign',
          raw: raw
        }
        access_token ||= access_token('POST', path, payload.to_json)
        authorization = format('Bearer %<access_token>s', access_token: access_token)
        client.post(path, headers: { 'Authorization': authorization }, json: payload)
      end

      # unlock a multi-sign payment
      def unlock_multisigs(raw)
        path = '/multisigs'
        payload = {
          action: 'unlock',
          raw: raw
        }
        access_token ||= access_token('POST', path, payload.to_json)
        authorization = format('Bearer %<access_token>s', access_token: access_token)
        client.post(path, headers: { 'Authorization': authorization }, json: payload)
      end

      # used for create multisig payment code_id
      def create_multisig_payment(params)
        path = '/payments'
        payload = {
          asset_id: params[:asset_id],
          amount: params[:amount].to_s,
          trace_id: params[:trace_id] || SecureRandom.uuid,
          memo: params[:memo],
          opponent_multisig: {
            receivers: params[:receivers],
            threshold: params[:threshold]
          }
        }
        access_token ||= access_token('POST', path, payload.to_json)
        authorization = format('Bearer %<access_token>s', access_token: access_token)
        client.post(path, headers: { 'Authorization': authorization }, json: payload)
      end

      def verify_multi_payment(code_id)
        path = format('/codes/%<code_id>s', code_id: code_id)
        access_token ||= access_token('GET', path, '')
        authorization = format('Bearer %<access_token>s', access_token: access_token)
        client.get(path, headers: { 'Authorization': authorization })
      end
    end
  end
end